/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface JobInterface extends ethers.utils.Interface {
  functions: {
    "approveJob(uint256)": FunctionFragment;
    "cancelJob(uint256)": FunctionFragment;
    "closeJob(uint256)": FunctionFragment;
    "completeJob(uint256)": FunctionFragment;
    "completeTimedOutJob(uint256)": FunctionFragment;
    "daoEscrow()": FunctionFragment;
    "daoFunds()": FunctionFragment;
    "disputeJob(uint256)": FunctionFragment;
    "jobCount()": FunctionFragment;
    "jobs(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "postJob(uint256,string)": FunctionFragment;
    "resolveDisputeForEngineer(uint256)": FunctionFragment;
    "resolveDisputeForSupplier(uint256)": FunctionFragment;
    "resolveDisputeWithCustomSplit(uint256,uint256)": FunctionFragment;
    "startJob(uint256,uint256)": FunctionFragment;
    "withdrawDaoFunds(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTimedOutJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoEscrow", values?: undefined): string;
  encodeFunctionData(functionFragment: "daoFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disputeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postJob",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeForEngineer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeForSupplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeWithCustomSplit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startJob",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDaoFunds",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approveJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTimedOutJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputeJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeForEngineer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeForSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeWithCustomSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDaoFunds",
    data: BytesLike
  ): Result;

  events: {
    "JobApproved(uint256,uint256)": EventFragment;
    "JobCanceled(uint256)": EventFragment;
    "JobClosed(uint256)": EventFragment;
    "JobClosedByEngineer(uint256)": EventFragment;
    "JobClosedBySupplier(uint256)": EventFragment;
    "JobCompleted(uint256)": EventFragment;
    "JobDisputeResolved(uint256,uint8)": EventFragment;
    "JobDisputed(uint256)": EventFragment;
    "JobPosted(uint256,string)": EventFragment;
    "JobStarted(address,uint256)": EventFragment;
    "JobSupplied(address,uint256)": EventFragment;
    "JobTimeoutPayout(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JobApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobClosedByEngineer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobClosedBySupplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobDisputeResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobSupplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobTimeoutPayout"): EventFragment;
}

export type JobApprovedEvent = TypedEvent<
  [BigNumber, BigNumber] & { jobId: BigNumber; payoutAmount: BigNumber }
>;

export type JobCanceledEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobClosedEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobClosedByEngineerEvent = TypedEvent<
  [BigNumber] & { jobId: BigNumber }
>;

export type JobClosedBySupplierEvent = TypedEvent<
  [BigNumber] & { jobId: BigNumber }
>;

export type JobCompletedEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobDisputeResolvedEvent = TypedEvent<
  [BigNumber, number] & { jobId: BigNumber; finalState: number }
>;

export type JobDisputedEvent = TypedEvent<[BigNumber] & { jobId: BigNumber }>;

export type JobPostedEvent = TypedEvent<
  [BigNumber, string] & { jobId: BigNumber; jobMetaData: string }
>;

export type JobStartedEvent = TypedEvent<
  [string, BigNumber] & { engineer: string; jobId: BigNumber }
>;

export type JobSuppliedEvent = TypedEvent<
  [string, BigNumber] & { supplier: string; jobId: BigNumber }
>;

export type JobTimeoutPayoutEvent = TypedEvent<
  [BigNumber, BigNumber] & { jobId: BigNumber; payoutAmount: BigNumber }
>;

export class Job extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: JobInterface;

  functions: {
    approveJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoEscrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    daoFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jobCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        number
      ] & {
        supplier: string;
        bounty: BigNumber;
        engineer: string;
        deposit: BigNumber;
        startTime: BigNumber;
        completedTime: BigNumber;
        closedBySupplier: boolean;
        closedByEngineer: boolean;
        state: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    postJob(
      bountyValue: BigNumberish,
      jobMetaData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDaoFunds(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTimedOutJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoEscrow(overrides?: CallOverrides): Promise<BigNumber>;

  daoFunds(overrides?: CallOverrides): Promise<BigNumber>;

  disputeJob(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jobCount(overrides?: CallOverrides): Promise<BigNumber>;

  jobs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      number
    ] & {
      supplier: string;
      bounty: BigNumber;
      engineer: string;
      deposit: BigNumber;
      startTime: BigNumber;
      completedTime: BigNumber;
      closedBySupplier: boolean;
      closedByEngineer: boolean;
      state: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  postJob(
    bountyValue: BigNumberish,
    jobMetaData: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveDisputeForEngineer(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveDisputeForSupplier(
    jobId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveDisputeWithCustomSplit(
    jobId: BigNumberish,
    engineerAmountPct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startJob(
    jobId: BigNumberish,
    deposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDaoFunds(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    closeJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    completeJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    daoEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    daoFunds(overrides?: CallOverrides): Promise<BigNumber>;

    disputeJob(jobId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    jobCount(overrides?: CallOverrides): Promise<BigNumber>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        number
      ] & {
        supplier: string;
        bounty: BigNumber;
        engineer: string;
        deposit: BigNumber;
        startTime: BigNumber;
        completedTime: BigNumber;
        closedBySupplier: boolean;
        closedByEngineer: boolean;
        state: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    postJob(
      bountyValue: BigNumberish,
      jobMetaData: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDaoFunds(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "JobApproved(uint256,uint256)"(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;

    JobApproved(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;

    "JobCanceled(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobCanceled(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobClosed(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobClosed(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobClosedByEngineer(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobClosedByEngineer(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobClosedBySupplier(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobClosedBySupplier(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobCompleted(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobCompleted(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobDisputeResolved(uint256,uint8)"(
      jobId?: BigNumberish | null,
      finalState?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { jobId: BigNumber; finalState: number }
    >;

    JobDisputeResolved(
      jobId?: BigNumberish | null,
      finalState?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { jobId: BigNumber; finalState: number }
    >;

    "JobDisputed(uint256)"(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    JobDisputed(
      jobId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { jobId: BigNumber }>;

    "JobPosted(uint256,string)"(
      jobId?: BigNumberish | null,
      jobMetaData?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { jobId: BigNumber; jobMetaData: string }
    >;

    JobPosted(
      jobId?: BigNumberish | null,
      jobMetaData?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { jobId: BigNumber; jobMetaData: string }
    >;

    "JobStarted(address,uint256)"(
      engineer?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { engineer: string; jobId: BigNumber }
    >;

    JobStarted(
      engineer?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { engineer: string; jobId: BigNumber }
    >;

    "JobSupplied(address,uint256)"(
      supplier?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { supplier: string; jobId: BigNumber }
    >;

    JobSupplied(
      supplier?: string | null,
      jobId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { supplier: string; jobId: BigNumber }
    >;

    "JobTimeoutPayout(uint256,uint256)"(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;

    JobTimeoutPayout(
      jobId?: BigNumberish | null,
      payoutAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { jobId: BigNumber; payoutAmount: BigNumber }
    >;
  };

  estimateGas: {
    approveJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    daoFunds(overrides?: CallOverrides): Promise<BigNumber>;

    disputeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jobCount(overrides?: CallOverrides): Promise<BigNumber>;

    jobs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    postJob(
      bountyValue: BigNumberish,
      jobMetaData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDaoFunds(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTimedOutJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputeJob(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jobCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postJob(
      bountyValue: BigNumberish,
      jobMetaData: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveDisputeForEngineer(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveDisputeForSupplier(
      jobId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveDisputeWithCustomSplit(
      jobId: BigNumberish,
      engineerAmountPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startJob(
      jobId: BigNumberish,
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDaoFunds(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
